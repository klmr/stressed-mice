#!/usr/bin/env Rscript

sys = modules::import('klmr/sys')

sys$run({
    args = sys$cmd$parse(opt('e', 'gene-expression', 'normalized gene counts'),
                         opt('g', 'genes', 'the differential expression table'),
                         opt('s', 'samples', 'the sample sheet'),
                         opt('a', 'annotation', 'the TE annotation'),
                         arg('outfile', 'path of the output PDF'))

    vst_expression = readr::read_tsv(args$gene_expression)
    sorted_results = readr::read_tsv(args$genes)
    samples = readr::read_tsv(args$samples)

    modules::import_package('dplyr', attach = TRUE)
    modules::import_package('tidyr', attach = TRUE)
    modules::import('klmr/ggplots', attach = TRUE)

    theme_set(theme_publication)

    alpha = 0.05

    de_genes = vst_expression %>%
        inner_join(sorted_results, by = 'Gene') %>%
        filter(padj < alpha) %>%
        gather(Sample, Expression, -Gene, -log2FoldChange, -padj) %>%
        inner_join(samples, by = c(Sample = 'ID')) %>%
        select(Gene, Group, Expression, log2FoldChange, padj) %>%
        group_by(Gene, Group) %>%
        mutate(Mean = mean(Expression)) %>%
        ungroup() %>%
        mutate(Gene = gsub('-', 'Â­', Gene),
               Gene = factor(Gene, unique(Gene)[order(unique(log2FoldChange))],
                             ordered = TRUE))

    annotation = rtracklayer::import(args$annotation) %>%
        GenomicRanges::mcols() %>%
        as_data_frame() %>%
        select(Name, `TE class` = Derives_from) %>%
        group_by(Name, `TE class`) %>%
        summarize()

    gene_changes = de_genes %>%
        group_by(Gene, Group) %>%
        summarize(Mean = first(Mean), log2FoldChange = first(log2FoldChange)) %>%
        spread(Group, Mean) %>%
        inner_join(annotation, by = c(Gene = 'Name')) %>%
        ungroup() %>%
        separate(`TE class`, c('TE order', 'TE name'), '/', remove = FALSE) %>%
        mutate(`TE name` = sub('-.*', '', `TE name`)) %>%
        mutate(Gene = reorder(Gene, log2FoldChange))

    log2_breaks = function (x) {
        breaks = scales::log_breaks(base = 2)(x)
        # Interpolate more point between even log breaks
        sort(c(breaks, na.omit(rowMeans(cbind(breaks, lag(breaks))))))
    }

    gene_change_labels = gene_changes %>%
        with(sprintf('%s\n(%s)', `TE class`, Gene))

    long_gene_changes = gather(gene_changes, Experiment, y,
                               one_of('MSUS', 'Control'))

    p = ggplot(gene_changes) +
        aes(x = Gene, color = log2FoldChange) +
        geom_point(aes(y = y, shape = Experiment), size = 2,
                   data = long_gene_changes, color = 'gray') +
        geom_segment(aes(xend = Gene, y = Control, yend = MSUS), lwd = 1) +
        geom_tile(aes(fill = `TE order`, y = min(long_gene_changes$y) - 0.5),
                  width = 0.9, height = 0.05, color = 'white') +
        scale_x_discrete(labels = gene_change_labels) +
        scale_y_continuous(breaks = log2_breaks, trans = scales::log2_trans()) +
        scale_color_continuous(limits = range(gene_changes$log2FoldChange)) +
        scale_fill_grey(start = 0.1, end = 0.9) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
              panel.grid.major.x = element_blank()) +
        labs(x = 'Transposable element', y = 'Expression (arb. unit)',
             color = expression(paste(log[2], FC))) +
        guides(shape = guide_legend(order = 1),
               color = guide_colorbar(order = 2),
               fill = guide_legend(order = 3))

    ggsave(args$outfile, p, width = 10, height = 5)
    fonts$embed(args$outfile)
})

# vim: ft=r
