#!/usr/bin/env Rscript

sys = modules::import('klmr/sys')

save_plot = function (prefix, ...) {
    outfile = file.path(dirname(args$outfile),
                        paste0(prefix, basename(args$outfile)))
    ggsave(outfile, ...)
    fonts$embed(outfile)
}

sys$run({
    args = sys$cmd$parse(opt('e', 'gene-expression', 'normalized gene counts'),
                         opt('g', 'genes', 'the differential expression table'),
                         opt('s', 'samples', 'the sample sheet'),
                         opt('a', 'annotation', 'the TE annotation'),
                         arg('outfile', 'path of the output PDF'))

    vst_expression = readr::read_tsv(args$gene_expression)
    sorted_results = readr::read_tsv(args$genes)
    samples = readr::read_tsv(args$samples)

    modules::import_package('dplyr', attach = TRUE)
    modules::import_package('tidyr', attach = TRUE)
    modules::import('klmr/ggplots', attach = TRUE)

    theme_set(theme_publication)

    alpha = 0.05

    de_genes = vst_expression %>%
        inner_join(sorted_results, by = 'Gene') %>%
        filter(padj < alpha) %>%
        gather(Sample, Expression, -Gene, -log2FoldChange, -padj) %>%
        inner_join(samples, by = c(Sample = 'ID')) %>%
        select(Gene, Group, Expression, log2FoldChange, padj) %>%
        group_by(Gene, Group) %>%
        mutate(Mean = mean(Expression)) %>%
        ungroup()

    annotation = rtracklayer::import(args$annotation) %>%
        GenomicRanges::mcols() %>%
        as_data_frame() %>%
        select(Name, `TE class` = Derives_from) %>%
        group_by(Name, `TE class`) %>%
        summarize()

    unique_te_names = function (names) {
        make.unique(names, sep = '\1') %>%
            stringr::str_split_fixed('\1', 2) %>%
            as.data.frame(stringsAsFactors = FALSE) %>%
            mutate(V2 = letters[as.integer(V2)]) %>%
            mutate(V2 = ifelse(is.na(V2), '', sprintf(' (%s)', V2))) %>%
            with(paste0(V1, V2))
    }

    gene_changes = de_genes %>%
        group_by(Gene, Group) %>%
        summarize(Mean = first(Mean), log2FoldChange = first(log2FoldChange)) %>%
        spread(Group, Mean) %>%
        inner_join(annotation, by = c(Gene = 'Name')) %>%
        ungroup() %>%
        separate(`TE class`, c('TE order', 'TE name'), '/', remove = FALSE) %>%
        mutate(`TE name` = sub('-.*', '', `TE name`)) %>%
        mutate_at(vars(Gene, `TE class`), funs(gsub('-', '­', .))) %>%
        mutate_at(vars(Gene, `TE class`), funs(reorder(., log2FoldChange))) %>%
        arrange(log2FoldChange)

    assign_unit = function (unit, index, value) {
        # grid::unit subset assignment is unfortunately messed up otherwise: it
        # returns a `unit.list`, which ggplot2 doesn’t seem to support.
        old_values = unclass(unit)
        old_values[index] = value
        unit(old_values, attr(unit, 'unit'))
    }

    bar_chart = ggplot(gene_changes) +
        aes(Gene, 2 ** log2FoldChange, fill = `TE order`) +
        geom_bar(stat = 'identity') +
        geom_hline(aes(yintercept = y), data = data_frame(y = 1)) +
        scale_x_discrete(labels = unique_te_names(gene_changes$`TE name`)) +
        ylab('Fold change') +
        scale_y_continuous(expand = c(0, 0)) +
        theme(text = element_text(size = 6),
              axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
              legend.position = 'bottom',
              legend.key.size = unit(6, 'pt'),
              plot.margin = assign_unit(theme_get()$plot.margin, c(2, 4), 0))

    save_plot('bar-chart-', bar_chart, width = 11, height = 5.5, units = 'cm')
})

# vim: ft=r
