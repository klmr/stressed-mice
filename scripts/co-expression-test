#!/usr/bin/env Rscript

sys = modules::import('klmr/sys')

sys$run({
    args = sys$cmd$parse(opt('t', 'te-list', 'normalized TE gene counts'),
                         opt('1', 'te-annotation', 'the TE annotation'),
                         opt('d', 'de-genes', 'list of DE protein-coding and lncRNA genes'),
                         opt('2', 'p-annotation', 'the protein-coding and lncRNA annotation'),
                         arg('outfile', 'path of the output PDF'))

    io = modules::import('ebi-predocs/ebits/io')
    modules::import_package('dplyr', attach = TRUE)
    modules::import('klmr/functional/lambda')

    te_list = readr::read_tsv(args$te_list)
    te_annotation = rtracklayer::import(args$te_annotation)
    te_annotation = te_annotation[te_annotation$Name %in% unique(te_list$Gene)]
    p_annotation = rtracklayer::import(args$p_annotation)
    is_gene = p_annotation$type == 'gene'
    chromosomes = GenomeInfoDb::seqlevels(p_annotation)
    chromosomes = grep('^(\\d+|X|Y|M[Tt])$', chromosomes, value = TRUE)
    is_real_chr = as.vector(GenomicRanges::seqnames(p_annotation)) %in% chromosomes
    is_from_ensembl = grepl('ensembl', p_annotation$source)
    p_annotation = p_annotation[is_gene & is_real_chr & is_from_ensembl]

    # Filter TEs and protein-coding annotation for DE genes

    alpha = 0.01

    all_tes = te_list$Gene
    de_tes = filter(te_list, padj < alpha, log2FoldChange > 0)$Gene
    non_de_tes = setdiff(all_tes, de_tes)

    de_te_ann = te_annotation[te_annotation$Name %in% de_tes]
    non_de_te_ann = te_annotation[te_annotation$Name %in% non_de_tes]

    protein_coding_gene_list = io$read_table(args$de_genes, header = TRUE) %>%
        rename(Gene = id)

    all_genes = protein_coding_gene_list$Gene
    de_genes = protein_coding_gene_list %>%
        filter(padj < alpha, log2FoldChange > 0) %>%
        with(Gene)

    de_gene_ann = p_annotation[p_annotation$gene_id %in% de_genes]
    all_gene_ann = p_annotation[p_annotation$gene_id %in% all_genes]

    # Count overlaps of TE promoters with DE genes, and with all genes. Then
    # perform a K–S test to test whether it’s distinct from background
    # distribution of ratios.

    overlap_ratios = function (tes, genes_up, genes_total, windowsize) {
        te_tads = GenomicRanges::promoters(tes, windowsize, windowsize)
        de_counts = GenomicRanges::countOverlaps(te_tads, genes_up)
        total_counts = GenomicRanges::countOverlaps(te_tads, genes_total)
        Filter(Negate(is.nan), de_counts / total_counts)
    }

    model_summary = function (windowsize) {
        foreground_ratios = overlap_ratios(de_te_ann, de_gene_ann, all_gene_ann, windowsize)
        background_ratios = overlap_ratios(non_de_te_ann, de_gene_ann, all_gene_ann, windowsize)

        as_df = function (ecdf_f, type) {
            env = environment(ecdf_f)
            data_frame(Ratio = env$x, Prob = env$y, TE = type)
        }

        list(windowsize = windowsize,
             test = ks.test(foreground_ratios, background_ratios),
             data = bind_rows(as_df(ecdf(foreground_ratios), 'DE'),
                              as_df(ecdf(background_ratios), 'non­DE')))
    }

    # Check for overlap of protein-coding annotation in the region adjacent to
    # TEs.

    window_sizes = c(10000, 50000, 100000)

    models = lapply(window_sizes, model_summary)

    colnames = c('Ratio', 'Prob', 'TE', 'Window size')
    model_data = models %>%
        lapply(x -> mutate(x$data, `Window size` = x$windowsize)) %>%
        bind_rows() %>%
        group_by(TE, `Window size`) %>%
        # Add lower and upper ECDF boundaries, needed as plot limits.
        do(do.call(add_row, c(list(.), setNames(list(0, 0, first(.$TE), first(.$`Window size`)), colnames),
                              .before = 0))) %>%
        do(do.call(add_row, c(list(.), setNames(list(1, 1, first(.$TE), first(.$`Window size`)), colnames))))

    model_evidence = models %>%
        {data_frame(p = vapply(., x -> x$test$p.value, numeric(1)),
                    `Window size` = vapply(., `[[`, numeric(1), 'windowsize'))} %>%
        mutate(x = 1, y = 0.1)

    modules::import('klmr/ggplots', attach = TRUE)

    theme_set(theme_publication)

    p = ggplot(model_data) +
        aes(x = Ratio, y = Prob) +
        facet_wrap(~ `Window size`, nrow = 1,
                   labeller = l -> list(sprintf('%0.0f kb', l[[1]] / 1000))) +
        geom_step(aes(color = TE)) +
        geom_text(aes(x, y, label = sprintf('italic(p) == %.2f', p)), size = 3,
                  model_evidence, hjust = 1, color = '#666666', parse = TRUE) +
        scale_y_continuous(limits = c(0, 1)) +
        ggtitle('K–S test of TE co­regulation') +
        labs(x = 'Ratio of DE/all protein­coding genes within a given window',
             y = 'Cumulative density',
             color = '') +
        scale_color_grey() +
        theme(legend.position = 'bottom',
              panel.grid.major = element_line())

    ggsave(args$outfile, p, width = 5, height = 3)
    fonts$embed(args$outfile)
})

# vim: ft=r
