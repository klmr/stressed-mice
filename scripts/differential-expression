#!/usr/bin/env Rscript

library(methods)

sys = modules::import('klmr/sys')

plot_to_file = function (plot_expr, file, device = pdf) {
    on.exit(dev.off())
    device(file)
    plot_result = plot_expr
    if (inherits(plot_result, 'ggplot'))
        plot(plot_result)
}

filename = function (template) {
    file.path(args$prefix,
              sprintf(template, paste(contrast[-1], collapse = '-vs-')))
}

sys$run({
    args = sys$cmd$parse(opt('p', 'prefix', 'output path prefix'),
                         arg('contrast', sprintf('contrast conditions separated by %s', dQuote('/'))),
                         arg('samples', 'samples description table'))

    deseq = modules::import_package('DESeq2')
    tx = modules::import_package('tximport')
    modules::import_package('dplyr', attach = TRUE)
    tibble = modules::import_package('tibble')

    samples = readr::read_tsv(args$samples) %>%
        mutate(Experimenter = gsub('\\d+$', '', ID))
    tx2gene = readr::read_tsv(samples$File[1]) %>%
        mutate(TXNAME = Name, GENEID = Name) %>%
        distinct(TXNAME, GENEID)
    txdata = tx$tximport(with(samples, setNames(File, ID)),
                         type = 'salmon', tx2gene = tx2gene,
                         reader = readr::read_tsv)

    # needs `methods` â€¦
    dds = deseq$DESeqDataSetFromTximport(txdata, samples, ~Group + Experimenter)
    # Filter globally unexpressed genes
    dds = dds[rowSums(deseq$counts(dds)) != 0, ]
    dds = deseq$DESeq(dds)

    contrast = c('Group', strsplit(args$contrast, '/')[[1]])

    results = deseq$results(dds, contrast = contrast)

    plots = modules::import('./plot_de')

    dev = function (...) pdf(width = 7, height = 5, ...)
    ggplot2::theme_set(ggplot2::theme_minimal())
    plot_to_file(plots$plot_disp_ests(dds), filename('disp-ests-scatter-%s.pdf'), dev)
    plot_to_file(plots$plot_ma(results), filename('ma-scatter-%s.pdf'), dev)
    plot_to_file(plots$plot_pca(dds, c('Group', 'Experimenter')),
                 filename('pca-scatter-%s.pdf'), dev)

    sorted_results = results %>%
        as.data.frame() %>%
        tibble$rownames_to_column('Gene') %>%
        tibble$as_tibble() %>%
        arrange(padj) %>%
        filter(! is.na(padj)) %>%
        select(Gene, log2FoldChange, padj)

    readr::write_tsv(sorted_results, filename('genes-%s.tsv'))

    vst_expression = deseq$getVarianceStabilizedData(dds) %>%
        as.data.frame() %>%
        tibble$rownames_to_column('Gene')
    readr::write_tsv(vst_expression, filename('vsd-%s.tsv'))
})

# vim: ft=r
